
public class CalculaPrimo implements Runnable{

    private long i;
    private long f;
    
    /**
     * Construtor com  par√¢metros.
     * Inicializa os valores iniciais e finais do intervalo.
     * @param i Valor de in√≠cio do intervalo.
     * @param f Valor de fim do intervalo.
     */
    public CalculaPrimo(long i, long f){
        this.i = i;
        this.f = f;
    }
    
    /**
     * Verifica se um n√∫mero √© primo.
     * @param n N√∫mero a ser verificado.
     * @return true se o n√∫mero √© primo caso contr√°rio false.
     */
    public boolean ehPrimo(long n) {

        // N√∫meros menores que 2 n√£o s√£o primos.
        // 0 e 1 n√£o s√£o primos.
        if (n < 2) {
            return false;
        }
        // O n√∫mero 2 √© primo (e √© o √∫nico primo par).
        // Todo n√∫mero par maior que 2 n√£o √© primo.
        if (n == 2) {
            return true;
        }
        // Pares maiores que 2 n√£o s√£o primos
        if (n % 2 == 0) {
            return false;
        }
        // Verifica divisores de 3 at√© sqrt(n), apenas √≠mpares                                               
        // Se for divis√≠vel por qualquer um deles, n√£o √© primo.
        // Se n√£o for divis√≠vel, ent√£o √© primo.
        // Se um n√∫mero n n√£o √© primo, ent√£o ele pode ser escrito como um produto:
        //                    ùëõ = ùëé √ó ùëè
        // Se ambos ùëé e ùëè fossem maiores que sqrt(ùëõ), o produto seria maior que ùëõ.
        // Se ambos fossem menores que ùëõ, o produto seria menor que ùëõ.
        // Portanto, sempre existe pelo menos um divisor ‚â§ srqt(ùëõ).
        long limite = (long) Math.sqrt(n);
        for (int i = 3; i <= limite; i += 2) {
            if (n % i == 0) {
                return false; // encontrou divisor ‚Üí n√£o √© primo
            }
        }
        return true; // n√£o encontrou divisor ‚Üí √© primo
    }

    /**
     * M√©todo que verifica e imprime os n√∫meros primos entre inicio e fim
     * @param inicio Valor de in√≠cio do intervalo.
     * @param fim Valor de fim do intervalo.
     */
    public void exibirPrimos(long inicio, long fim) {
        for (long i = inicio; i <= fim; i++) {
            //Verifica se o n√∫mero √© primo
            if (ehPrimo(i)) {
                //System.out.println(i);
            }
        }
    }
    
    @Override
    public void run(){
        exibirPrimos(i, f);
        System.out.println("Terminei de calcular e mostrar os primos do sub-intervalo de " + i + " at√© " + f);
    }
}
